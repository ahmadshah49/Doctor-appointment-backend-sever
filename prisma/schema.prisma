generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/generated/type-graphql"
}

enum role {
  DOCTOR
  PATIENT
}

enum gender {
  MALE
  FEMALE
  OTHERS
}

model User {
  id                       Int       @id @default(autoincrement())
  name                     String
  email                    String?   @unique
  password                 String?
  phoneNumber              String?   @unique
  role                     role      @default(PATIENT)
  token                    String?
  tokenExpire              DateTime?
  otp                      String?   @unique
  resetPasswordToken       String?
  resetPasswordTokenExpire DateTime?
  otpExpire                DateTime?
  profilePicture           String?
  refreshToken             String?
  doctor                   Doctor?
  patient                  Patient?
}

model Doctor {
  id                 Int                  @id @default(autoincrement())
  User               User                 @relation(fields: [userId], references: [id])
  userId             Int                  @unique
  name               String
  profilePhoto       String?
  address            String
  email              String
  gender             gender
  patients           Patient[]
  appointments       Appointment[]
  AvailabilitySlot   AvailabilitySlot[]
  UnavailabilitySlot UnavailabilitySlot[]
}

model Patient {
  id             Int           @id @default(autoincrement())
  age            String
  fullName       String
  gender         gender
  address        String
  email          String
  profilePicture String?
  phoneNo        String
  Doctor         Doctor?       @relation(fields: [doctorId], references: [id])
  doctorId       Int?          @unique
  User           User          @relation(fields: [userId], references: [id])
  userId         Int           @unique
  appointments   Appointment[]
}

model Appointment {
  id             Int                @id @default(autoincrement())
  fullName       String
  age            String
  gender         gender
  phoneNo        String
  address        String
  email          String
  medicalHistory String?
  presciptions   String[]
  details        String?
  scheduledDate  DateTime?
  status         AppointmentStatus? @default(UPCOMING)
  startTime      DateTime
  endTime        DateTime
  Doctor         Doctor?            @relation(fields: [doctorId], references: [userId])
  doctorId       Int?
  Patient        Patient?           @relation(fields: [patientId], references: [userId])
  patientId      Int?
}

model AvailabilitySlot {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  doctor    Doctor   @relation(fields: [doctorId], references: [userId])
  doctorId  Int      @unique
}

model UnavailabilitySlot {
  id          Int       @id @default(autoincrement())
  doctorId    Int       @unique
  startTime   DateTime
  endTime     DateTime
  startDate   DateTime?
  endDate     DateTime?
  reason      String?
  isAvailable Boolean?
  doctor      Doctor    @relation(fields: [doctorId], references: [userId])
}

enum AppointmentStatus {
  UPCOMING
  IN_PROGRESS
  MISSED
  COMPLETED
  CANCELLED
}
